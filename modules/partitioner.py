"""
Module that takes care of partitioning the data generated by preprocessor;
re-organizes the terms by topics
"""

###############################################################
# THIS CODE IS MY OWN WORK, IT WAS WRITTEN WITHOUT CONSULTING #
#                                                             #
# A TUTOR OR CODE WRITTEN BY OTHER STUDENTS - ARJUN LAL       #
###############################################################

import re

from modules import utils, constants


class Partitioner:
    """
    Class handling partitioning of the file generated by lda
    """

    def __init__(self):
        """
        Constructor with default value(s);
        paper_wise_topics formatted as follows:
        {
            0: ['paper_1_topic_0_words', 'paper_2_topic_0_words', ...],
            1: ['paper_1_topic_1_words', 'paper_2_topic_1_words', ...],
            ...,
            4: ['paper_1_topic_4_words', 'paper_2_topic_4_words', ...],
        }
        """
        self.TOPIC_FILE_TEMPLATE = constants.TOPIC_FILE_TEMPLATE
        self.WORD_ASSIGNMENTS_FILE = constants.WORD_ASSIGNMENTS_FILE
        self.TYPES_OF_TOPICS = constants.TYPES_OF_TOPICS
        self.paper_wise_topics = {
            topic_num: []
            for topic_num in range(self.TYPES_OF_TOPICS)
        }

    def partition(self):
        """
        Re-organizes the terms by topic:
        for each word assignment for the papers, creates a list of lists of topic-wise
        words, updates the topic_wise_words variable, and finally
        writes words of each topic to it's corresponding file

        :return:                    null
        """
        for topic_word_assignments in utils.read_file_to_list(self.WORD_ASSIGNMENTS_FILE):
            topic_wise_words = self.get_topic_wise_word_assignments(topic_word_assignments)
            self.update_paper_wise_topics(topic_wise_words)

        for topic_num, topic_words in self.paper_wise_topics.items():
            utils.write_list_to_file(
                self.TOPIC_FILE_TEMPLATE.format(topic_num=topic_num),
                topic_words
            )

    def get_topic_wise_word_assignments(self, topic_word_assignments: str):
        """
        Given a string of topic-wise word assignments, returns a list of 5 lists,
        where each sublist `i` has the words classified under topic i

        :param topic_word_assignments:  string of word assignments of format
                                `[M] [word]:[topic] [word]:[topic]...[word]:[topic]`
        :return:                        list of lists formatted as
                                [[topic0_words], [topic1_words], ..., [topic4_words]]
        """
        topics = [
            []
            for _ in range(self.TYPES_OF_TOPICS)
        ]
        word_assignment_regex = r'[0-9]+:[0-9]+'
        word_assignments = re.findall(
            word_assignment_regex, topic_word_assignments
        )
        for word_assignment in word_assignments:
            word, topic = self.get_word_and_topic(word_assignment)
            topics[topic].append(word)

        return [
            ' '.join(words)
            for words in topics
        ]

    def update_paper_wise_topics(self, topic_wise_words):
        """
        Updates the class variable containing the dictionary of topics
        with the given set of topic-wise words of a paper

        :param topic_wise_words:        a list of lists, where each list corresponds
                                    to the topic number, and has words classified as
                                    that topic; words are from one paper
        :return:                        null
        """
        for topic_num, words in enumerate(topic_wise_words):
            if words:
                self.paper_wise_topics[topic_num].append(words)

    @staticmethod
    def get_word_and_topic(word_assignment):
        """
        Given a word assignment of the form `word:topic`, returns the
        `word` as string and `topic` as an int

        :param word_assignment:         word assignment
        :return:                        word (str) and topic (int)
        """
        word = word_assignment.split(':')[0]
        topic = int(word_assignment.split(':')[1])
        return word, topic
